# SPDX-License-Identifier: Unlicense OR MIT-0
# Inspired by: https://hynek.me/articles/python-recursive-optional-dependencies/
# We here use a single-module distribution style https://setuptools.pypa.io/en/latest/userguide/package_discovery.html#single-module-distribution

[build-system]
# never uppercap requirements unless we have evidence it won't work https://iscinumpy.dev/post/bound-version-constraints/ 
# cython cannot be placed in optional-dependencies, Cython won't be able to do its magic to make it importable in setup.py
requires = ["setuptools>59", "cython>=3.0.0b2"]
build-backend = "setuptools.build_meta"

[project]  # beware if using setuptools: setup.py still gets executed, and even if pyproject.toml fields take precedence, if there is any code error in setup.py, building will fail!
name = "reedsolo"
version = "2.0.24b1"  # see PEP 440 https://peps.python.org/pep-0440/#pre-releases
description = "Pythonic universal errors-and-erasures Reed-Solomon codec to protect your data from errors and bitrot, with a future-proof zero-dependencies pure-python implementation and an optional speed-optimized Cython/C extension."
authors = [
    {name = "Tomer Filiba", email = "tomerfiliba@gmail.com"},
    {name = "Stephen Karl Larroque", email = "lrq3000@gmail.com"},
    ]
maintainers = [
    {name = "Stephen Karl Larroque", email = "lrq3000@gmail.com"},
    ]
requires-python = ">=3.7"
license = { file = "LICENSE" }
keywords = ["data", "protection", "correction", "recovery", "restore", "save", "data-recovery", "reed-solomon", "error-correction-code", "qr", "qr-codes", "barcodes"]
classifiers = [
    "Development Status :: 6 - Mature",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: The Unlicense (Unlicense)",  # Unlicense OR MIT-0 at the user preference
    "License :: OSI Approved :: MIT No Attribution License (MIT-0)",
    'Operating System :: Microsoft :: Windows',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: POSIX :: Linux',
    "Programming Language :: Python :: 2.7",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Programming Language :: Cython",
    "Topic :: Communications",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: System :: Archiving :: Backup",
    "Topic :: System :: Recovery Tools",
]
dependencies = [
    #"typing-extensions; python_version<'3.8'",
    #"importlib_metadata;python_version<'3.8'",
]

[project.urls]
Homepage = "https://github.com/tomerfiliba/reedsolomon"
Documentation = "https://github.com/tomerfiliba/reedsolomon/blob/master/README.rst"
"Source" = "https://github.com/tomerfiliba/reedsolomon"
Tracker = "https://github.com/tomerfiliba/reedsolomon/issues"
Download = "https://github.com/tomerfiliba/reedsolomon/releases"
"Conda-Forge" = "https://anaconda.org/conda-forge/reedsolo"
#Changelog = "https://url/changelog"

[project.optional-dependencies]
# tests_require was deprecated in setup.py by setuptools, because anyway downstream the user wants to test in their own environment, not an isolated env, so the only practical replacement is to have test requirements defined as an extras/optional-dependency [test] so that they can be installed in the user's environment if they want to: https://discuss.python.org/t/providing-a-way-to-specify-how-to-run-tests-and-docs/15016
test = [
    "pytest",
    "pytest-cov",
    "coveralls",
    "cython>=3.0.0b2",
    #"unireedsolomon",
    #"pyfilefixity"
]
#cythonize = [  # cython and other build time dependencies can NOT be defined as optional-dependencies nor extras, they are installed only after build! They need to be defined as build-system requirements. But it's possible to make it installable as an option given a config-setting arg, see: https://discuss.python.org/t/explicit-optional-cythonization-via-config-setting-post-pep517-and-install-option-deprecation/
#    "cython>=3.0.0b2"
#]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

#[tool.setuptools]
#package-dir = {"" = "src"}

[tool.setuptools.packages.find]
# IMPORTANT: systematically delete `src/<project.name>.egg-info` folder before rebuilding, otherwise the list of included files will not get updated (it's in `SOURCES.txt` file in this folder)
where = ["src"]
#exclude = ["test*"]
#namespaces = false

[tool.setuptools.package-data]
"*" = [
    "*.rst",
    "LICENSE*",
    "README*",
    "*.pyx",  # include the cython implementation sourcecode in the wheel, so that the user can cythonize later, this is necessary, it's not included by default even with extensions in setup.py
    "*.c",  # include the cythonized intermediary .c file for source distributions such as Gentoo, so that they do not need to install Cython v3 - no need since we use src-layout, it's automatically included
    #"tests",  # to help linux distros package builders, they may want to run the unit test to check their package is working OK - no need, tests folder is packaged by default in sdist nowadays
]

#[tool.setuptools.exclude-package-data]
#"*" = [
#    "docs/_build",
#    "tests/__pycache__",
#    "tests/.mypy_cache",
#]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
]
xfail_strict = true
testpaths = "tests"
filterwarnings = [
    "once::Warning",
]

[tool.coverage.run]
branch = true
relative_files = true
include = [
    "*/reedsolo.py",
    ]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]  # Beware: you need to delete .coveragerc if you have one, otherwise .coveragerc will take precedence!
show_missing = true
include = [
    "*/reedsolo.py",
]
omit = [
    "*/python?.?/*",
    "*/site-packages/nose/*",
    "*/opt/python/pypy*",
    "*/tests/*",
]
exclude_lines = [
    # a more strict default pragma
    "\\# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",
]

[tool.cibuildwheel]
#build = "*"
#skip = ""
#test-skip = ""

archs = ["auto"]
#build-frontend = "pip"
#dependency-versions = "pinned"
#environment = {"REEDSOLO_CYTHONIZE: 1"}
#environment-pass = []
build-verbosity = "1"

#before-all = ""
#before-build = ""
#repair-wheel-command = ""

test-command = "pytest {package}/tests"
#before-test = ""
#test-requires = []
test-extras = ["test"]  # reuse the [test] extras optional dependencies to install test dependencies, instead of redefining in test-requires

[tool.cibuildwheel.config-settings]
--build-option = "--cythonize"

# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python.  Multiline strings are treated as
# verbose regular expressions by Black.  Use [ ] to denote a significant space
# character.

# While black is awesome, it does not support cython, so we avoid for the moment
# to keep a similar formatting between the pure python and the cython implementations.
# see: https://github.com/psf/black/issues/359

#[tool.black]
#line-length = 88
#target-version = ['py39', 'py310', 'py311']
#include = '\.pyi?$'
# We use preview style for formatting Black itself. If you
# want stable formatting across releases, you should keep
# this off.
#preview = false
